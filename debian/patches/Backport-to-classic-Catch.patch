Description: Backport to classic Catch available in Debian
Forwarded: not-needed
Author: Nicholas Guriev <guriev-ns@ya.ru>
Last-Update: Wed, 22 Jan 2020 21:51:33 +0300

--- a/tests/bases.cpp
+++ b/tests/bases.cpp
@@ -9,15 +9,15 @@
 // nothing for now
 #else
 TEST_CASE("Triviality", "[bases.triviality]") {
-    REQUIRE(std::is_trivially_copy_constructible<tl::expected<int,int>>::value);
-    REQUIRE(std::is_trivially_copy_assignable<tl::expected<int,int>>::value);
-    REQUIRE(std::is_trivially_move_constructible<tl::expected<int,int>>::value);
-    REQUIRE(std::is_trivially_move_assignable<tl::expected<int,int>>::value);
-    REQUIRE(std::is_trivially_destructible<tl::expected<int,int>>::value);
+    REQUIRE((std::is_trivially_copy_constructible<tl::expected<int,int>>::value));
+    REQUIRE((std::is_trivially_copy_assignable<tl::expected<int,int>>::value));
+    REQUIRE((std::is_trivially_move_constructible<tl::expected<int,int>>::value));
+    REQUIRE((std::is_trivially_move_assignable<tl::expected<int,int>>::value));
+    REQUIRE((std::is_trivially_destructible<tl::expected<int,int>>::value));
 
-    REQUIRE(std::is_trivially_copy_constructible<tl::expected<void,int>>::value);
-    REQUIRE(std::is_trivially_move_constructible<tl::expected<void,int>>::value);
-    REQUIRE(std::is_trivially_destructible<tl::expected<void,int>>::value);
+    REQUIRE((std::is_trivially_copy_constructible<tl::expected<void,int>>::value));
+    REQUIRE((std::is_trivially_move_constructible<tl::expected<void,int>>::value));
+    REQUIRE((std::is_trivially_destructible<tl::expected<void,int>>::value));
 
 
     {
@@ -28,11 +28,11 @@ TEST_CASE("Triviality", "[bases.triviality]") {
             T& operator=(T&&) = default;
             ~T() = default;
         };
-        REQUIRE(std::is_trivially_copy_constructible<tl::expected<T,int>>::value);
-        REQUIRE(std::is_trivially_copy_assignable<tl::expected<T,int>>::value);
-        REQUIRE(std::is_trivially_move_constructible<tl::expected<T,int>>::value);
-        REQUIRE(std::is_trivially_move_assignable<tl::expected<T,int>>::value);
-        REQUIRE(std::is_trivially_destructible<tl::expected<T,int>>::value);
+        REQUIRE((std::is_trivially_copy_constructible<tl::expected<T,int>>::value));
+        REQUIRE((std::is_trivially_copy_assignable<tl::expected<T,int>>::value));
+        REQUIRE((std::is_trivially_move_constructible<tl::expected<T,int>>::value));
+        REQUIRE((std::is_trivially_move_assignable<tl::expected<T,int>>::value));
+        REQUIRE((std::is_trivially_destructible<tl::expected<T,int>>::value));
     }
 
     {
@@ -43,34 +43,34 @@ TEST_CASE("Triviality", "[bases.triviality]") {
             T& operator=(T&&) {};
             ~T(){}
         };
-        REQUIRE(!std::is_trivially_copy_constructible<tl::expected<T,int>>::value);
-        REQUIRE(!std::is_trivially_copy_assignable<tl::expected<T,int>>::value);
-        REQUIRE(!std::is_trivially_move_constructible<tl::expected<T,int>>::value);
-        REQUIRE(!std::is_trivially_move_assignable<tl::expected<T,int>>::value);
-        REQUIRE(!std::is_trivially_destructible<tl::expected<T,int>>::value);
+        REQUIRE((!std::is_trivially_copy_constructible<tl::expected<T,int>>::value));
+        REQUIRE((!std::is_trivially_copy_assignable<tl::expected<T,int>>::value));
+        REQUIRE((!std::is_trivially_move_constructible<tl::expected<T,int>>::value));
+        REQUIRE((!std::is_trivially_move_assignable<tl::expected<T,int>>::value));
+        REQUIRE((!std::is_trivially_destructible<tl::expected<T,int>>::value));
     }
 
 }
 
 TEST_CASE("Deletion", "[bases.deletion]") {
-    REQUIRE(std::is_copy_constructible<tl::expected<int,int>>::value);
-    REQUIRE(std::is_copy_assignable<tl::expected<int,int>>::value);
-    REQUIRE(std::is_move_constructible<tl::expected<int,int>>::value);
-    REQUIRE(std::is_move_assignable<tl::expected<int,int>>::value);
-    REQUIRE(std::is_destructible<tl::expected<int,int>>::value);
+    REQUIRE((std::is_copy_constructible<tl::expected<int,int>>::value));
+    REQUIRE((std::is_copy_assignable<tl::expected<int,int>>::value));
+    REQUIRE((std::is_move_constructible<tl::expected<int,int>>::value));
+    REQUIRE((std::is_move_assignable<tl::expected<int,int>>::value));
+    REQUIRE((std::is_destructible<tl::expected<int,int>>::value));
 
     {
         struct T {
             T()=default;
         };
-        REQUIRE(std::is_default_constructible<tl::expected<T,int>>::value);
+        REQUIRE((std::is_default_constructible<tl::expected<T,int>>::value));
     }
 
     {
         struct T {
             T(int){}
         };
-        REQUIRE(!std::is_default_constructible<tl::expected<T,int>>::value);
+        REQUIRE((!std::is_default_constructible<tl::expected<T,int>>::value));
     }
 
     {
@@ -81,11 +81,11 @@ TEST_CASE("Deletion", "[bases.deletion]") {
             T& operator=(T&&) = default;
             ~T() = default;
         };
-        REQUIRE(std::is_copy_constructible<tl::expected<T,int>>::value);
-        REQUIRE(std::is_copy_assignable<tl::expected<T,int>>::value);
-        REQUIRE(std::is_move_constructible<tl::expected<T,int>>::value);
-        REQUIRE(std::is_move_assignable<tl::expected<T,int>>::value);
-        REQUIRE(std::is_destructible<tl::expected<T,int>>::value);
+        REQUIRE((std::is_copy_constructible<tl::expected<T,int>>::value));
+        REQUIRE((std::is_copy_assignable<tl::expected<T,int>>::value));
+        REQUIRE((std::is_move_constructible<tl::expected<T,int>>::value));
+        REQUIRE((std::is_move_assignable<tl::expected<T,int>>::value));
+        REQUIRE((std::is_destructible<tl::expected<T,int>>::value));
     }
 
     {
@@ -95,10 +95,10 @@ TEST_CASE("Deletion", "[bases.deletion]") {
             T& operator=(const T&)=delete;
             T& operator=(T&&)=delete;
         };
-        REQUIRE(!std::is_copy_constructible<tl::expected<T,int>>::value);
-        REQUIRE(!std::is_copy_assignable<tl::expected<T,int>>::value);
-        REQUIRE(!std::is_move_constructible<tl::expected<T,int>>::value);
-        REQUIRE(!std::is_move_assignable<tl::expected<T,int>>::value);
+        REQUIRE((!std::is_copy_constructible<tl::expected<T,int>>::value));
+        REQUIRE((!std::is_copy_assignable<tl::expected<T,int>>::value));
+        REQUIRE((!std::is_move_constructible<tl::expected<T,int>>::value));
+        REQUIRE((!std::is_move_assignable<tl::expected<T,int>>::value));
     }
 
     {
@@ -108,10 +108,10 @@ TEST_CASE("Deletion", "[bases.deletion]") {
             T& operator=(const T&)=delete;
             T& operator=(T&&)=default;
         };
-        REQUIRE(!std::is_copy_constructible<tl::expected<T,int>>::value);
-        REQUIRE(!std::is_copy_assignable<tl::expected<T,int>>::value);
-        REQUIRE(std::is_move_constructible<tl::expected<T,int>>::value);
-        REQUIRE(std::is_move_assignable<tl::expected<T,int>>::value);
+        REQUIRE((!std::is_copy_constructible<tl::expected<T,int>>::value));
+        REQUIRE((!std::is_copy_assignable<tl::expected<T,int>>::value));
+        REQUIRE((std::is_move_constructible<tl::expected<T,int>>::value));
+        REQUIRE((std::is_move_assignable<tl::expected<T,int>>::value));
     }
 
     {
@@ -121,8 +121,8 @@ TEST_CASE("Deletion", "[bases.deletion]") {
             T& operator=(const T&)=default;
             T& operator=(T&&)=delete;
         };
-        REQUIRE(std::is_copy_constructible<tl::expected<T,int>>::value);
-        REQUIRE(std::is_copy_assignable<tl::expected<T,int>>::value);
+        REQUIRE((std::is_copy_constructible<tl::expected<T,int>>::value));
+        REQUIRE((std::is_copy_assignable<tl::expected<T,int>>::value));
     }
 
 	{
